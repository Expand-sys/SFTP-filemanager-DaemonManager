/// <reference types="node" />
import { EventEmitter } from 'events';
import { SessionStore, SessionData } from './SessionStore';
declare type StoredData<T> = [T, number | null];
export declare type MemoryStoreOptions<T> = {
    store?: Map<string, StoredData<T>>;
    prefix?: string;
};
export declare class MemoryStore<T extends SessionData = SessionData> extends EventEmitter implements SessionStore {
    private store;
    private readonly prefix;
    constructor({ store, prefix }?: MemoryStoreOptions<T>);
    private getKey;
    set(sessionId: string, session: T, expiry?: number | null): Promise<void>;
    get(sessionId: string): Promise<[T, number | null] | null>;
    destroy(sessionId: string): Promise<void>;
    touch(sessionId: string, expiry?: number | null): Promise<void>;
    all(): Promise<{
        [sid: string]: SessionData;
    }>;
}
export declare const MEMORY_STORE: MemoryStore<SessionData>;
export {};
