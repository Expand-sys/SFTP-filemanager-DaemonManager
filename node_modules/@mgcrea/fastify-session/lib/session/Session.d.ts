/// <reference types="node" />
import type { CookieSerializeOptions } from 'fastify-cookie';
import { SessionCrypto } from '../crypto/SessionCrypto';
import { SessionStore } from '../store';
import { SessionData } from './SessionData';
export declare const kSessionData: unique symbol;
export declare const kCookieOptions: unique symbol;
export declare const kExpiry: unique symbol;
export declare const kSecretKeys: unique symbol;
export declare const kSessionStore: unique symbol;
export declare const kSessionCrypto: unique symbol;
export declare const kOtherOptions: unique symbol;
export declare type SessionConfiguration = {
    cookieOptions?: CookieSerializeOptions;
    crypto?: SessionCrypto;
    store?: SessionStore;
    secretKeys: Buffer[];
};
export declare type SessionOptions = CookieSerializeOptions & {
    id?: string;
};
export declare class Session<T extends SessionData = SessionData> {
    readonly id: string;
    created: boolean;
    rotated: boolean;
    changed: boolean;
    deleted: boolean;
    private [kSessionData];
    private [kCookieOptions];
    private [kExpiry];
    private static [kSecretKeys];
    private static [kSessionCrypto];
    private static [kSessionStore]?;
    private static [kCookieOptions];
    static configure({ secretKeys, crypto, store, cookieOptions, }: SessionConfiguration): void;
    constructor(data?: Partial<T>, options?: SessionOptions);
    static fromCookie(cookie: string): Promise<Session>;
    toCookie(): Promise<string>;
    touch(): Promise<void>;
    destroy(): Promise<void>;
    save(): Promise<void>;
    get data(): SessionData;
    get expiry(): number | null;
    get<K extends keyof T = keyof T>(key: K): T[K] | undefined;
    set<K extends keyof T = keyof T>(key: K, value: T[K]): void;
    delete(): void;
    get options(): CookieSerializeOptions;
    setOptions(options: CookieSerializeOptions): void;
}
